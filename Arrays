class Solution {
    public void duplicateZeros(int[] arr) {
        
        ArrayList<Integer> list = new ArrayList<>();
        
        for(int i = 0; i < arr.length; i++){
            if(arr[i] != 0){
                list.add(arr[i]);
            }else{
                list.add(0);
                list.add(0);
            }
        }
        
        for(int i = 0; i < arr.length; i++){
            arr[i] = list.get(i);
        }
        
    }
}





class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        
        ArrayList<Integer> list = new ArrayList<>();
        
        for(int i = 0; i < m; i++){
            list.add(nums1[i]);
        }
        
        for(int i = 0; i < n; i++){
            list.add(nums2[i]);
        }
        
        
        int i = 0;
        for(int num : list ){
            nums1[i++] = num;
        }
        
        Arrays.sort(nums1);    
        
    }
}

class Solution {
    public int removeElement(int[] nums, int val) {
        
        ArrayList<Integer> list = new ArrayList<>();
        
        
        for(int num : nums){
            if(num != val){
                list.add(num);
            }
        }
        
        for(int i = 0; i < list.size(); i++){
            nums[i] = list.get(i);
        }
        
        return list.size();
                
    }
}

//concise approach

class Solution {
    public int removeElement(int[] nums, int val) {
        
        int count = 0;
        
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != val){
                nums[count] = nums[i];
                count++;
            }
        }
        
        return count;
    }
}
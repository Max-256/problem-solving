class Solution {
    public void duplicateZeros(int[] arr) {
        
        ArrayList<Integer> list = new ArrayList<>();
        
        for(int i = 0; i < arr.length; i++){
            if(arr[i] != 0){
                list.add(arr[i]);
            }else{
                list.add(0);
                list.add(0);
            }
        }
        
        for(int i = 0; i < arr.length; i++){
            arr[i] = list.get(i);
        }
        
    }
}





class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        
        ArrayList<Integer> list = new ArrayList<>();
        
        for(int i = 0; i < m; i++){
            list.add(nums1[i]);
        }
        
        for(int i = 0; i < n; i++){
            list.add(nums2[i]);
        }
        
        
        int i = 0;
        for(int num : list ){
            nums1[i++] = num;
        }
        
        Arrays.sort(nums1);    
        
    }
}

class Solution {
    public int removeElement(int[] nums, int val) {
        
        ArrayList<Integer> list = new ArrayList<>();
        
        
        for(int num : nums){
            if(num != val){
                list.add(num);
            }
        }
        
        for(int i = 0; i < list.size(); i++){
            nums[i] = list.get(i);
        }
        
        return list.size();
                
    }
}

//concise approach

class Solution {
    public int removeElement(int[] nums, int val) {
        
        int count = 0;
        
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != val){
                nums[count] = nums[i];
                count++;
            }
        }
        
        return count;
    }
}



class Solution {
    public int removeDuplicates(int[] nums) {
       
        int index = 1;
        
        for(int i = 1; i < nums.length; i++){
            if(nums[i] != nums[index - 1]){
                nums[index++] = nums[i];
            }
        }
        
        return index;   
    }
}


class Solution {
    public boolean checkIfExist(int[] arr) {
       
        HashSet<Integer> set = new HashSet<>();
        
        for(int n : arr){
            
            if(set.contains(n*2) || n % 2 == 0 && set.contains(n / 2)){
                return true;
            }
            
            
            set.add(n);
        }
        
        return false;
    }
}

//validate mountain array

class Solution {
    public boolean validMountainArray(int[] arr) {
        
        if(arr.length < 3){
            return false;
        }
        
        int start = 0;
        int end = arr.length - 1;
        
        while(start != end){
            if(arr[start] < arr[start + 1]){
                start++;
            } else if(arr[end] < arr[end - 1]){
                end--;
            }else return false;
        }
        
        if(start == 0 || end == arr.length - 1){
            return false;
        }
        
        return true;          
    }
}

//replace item with the greatest item to its right;

class Solution {
    public int[] replaceElements(int[] arr) {
        
        var max = -1;
        
        for (int i = arr.length - 1; i >= 0; i--) {
            var tmp = arr[i];
            arr[i] = max;
            if (tmp > max) {
                max = tmp;
            }
        }
        
        return arr;
    }
}


//move even items in the array to the right;

class Solution {
    public int[] sortArrayByParity(int[] nums) {
        int i = 0;
        int j = 0;
        
        while(j < nums.length){
            if(nums[j] % 2 == 0){
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                i++;
            }
            j++;
        }
        return nums;
    }
}